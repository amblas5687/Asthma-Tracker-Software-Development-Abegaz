package controller;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import application.Main;
import application.DBConfig;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.Account;
import controller.AsthmaController;

public class UpdateController2 {
	Main main = new Main();
	//-----------------------------------------------------------------------------------------------------------------
	//accessing the controls from .fxml file for updating purpose
	@FXML private TextField txtfirstName, txtlastName, txtbirthDate, txtfullName, txtrelation, txtphone, txtemail;
	@FXML private PasswordField  txtCurrentPass, txtNewPass, txtConfirmPass;
	@FXML private Button btnUpdate1, btnUpdate2, btnUpdate3, btngetMain1, btngetMain2, btngetMain3;
	@FXML private Label lblStatus, lblErrorallFields1, lblErrorallFields2, lblErrorfirstName, lblErrorlastName,  
	lblErrorPassword, lblUsername, lblErrorbirthDate,  lblErrorfullName, lblErrorrelation, lblErrorphone, lblErroremail;
	Stage stage;
	Scene scene;
	Parent root;
	// EventHandler +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    //sets main in Main.java 
	public void setMain(Main mainIn)
	{
		main = mainIn;
	}
	//-----------------------------------------------------------------------------------------------------------------
	//Runs methods at scene start
    @FXML
    void initialize(){
    	setName();
    }

    //Displays welcome message, and makes it editable in code. Watch method called for changes.
    public void setName() {
    	lblUsername.setText(AsthmaController.curUser.getuserName());
    }
    //-----------------------------------------------------------------------------------------------------------------
  	/*Error checks textfields, if passed they are updated*/
  	public void ClickUpdateButton(ActionEvent event) throws Exception {
  		String firstName, lastName, password, conPassword, curPassword, birthDate, fullName, relation, phone, email;
  		int count = 0;
  		int counter = 0;
  		int counting = 0;
  		Account account = new Account();
  		
  		lblErrorallFields1.setText(null);
  		lblErrorallFields2.setText(null);
		
		firstName = txtfirstName.getText();
		lastName = txtlastName.getText();
		password = txtNewPass.getText();
		conPassword = txtConfirmPass.getText();
		curPassword = txtCurrentPass.getText();
		birthDate = txtbirthDate.getText();
		fullName = txtfullName.getText();
		relation = txtrelation.getText();
		phone = txtphone.getText();
		email = txtemail.getText();
		
		try{
		//-----------------------------------------------------------------------------------------------------------------
		//Error checks firstName
		boolean test1 = false;
	 	lblErrorfirstName.setText(null);
	 	if(!firstName.equals("")){
	 		//checks for numbers
	  		Pattern p = Pattern.compile("([0-9])", Pattern.CASE_INSENSITIVE);
		  	Matcher firstN = p.matcher(firstName);
			boolean firNam = firstN.find();
			if(firNam){
				lblErrorfirstName.setText("First name cannot contain numbers.");
				test1 = false;
			}else{
				test1 = true;
			}
			
			//checks for special characters
			Pattern p2 = Pattern.compile("[^a-zA-Z0-9-\\.]");//regex, can test on regex101.com -> very useful
			Matcher fName = p2.matcher(firstName);
			boolean fn = fName.find();
			
			if(fn){//fix for - and .
				lblErrorfirstName.setText("Invalid first name.Cannot use special characters.");
				test1 = false;
			}
	 	}
		//-----------------------------------------------------------------------------------------------------------------
		/* Updates firstName in userinfo table of Database -> populates: firstName */
	 	if(test1 == true){
	 		account.setfirstName(firstName);
			String query = "UPDATE userinfo SET firstName = ?";
			//attempt to connect to database
			try (Connection conn = DBConfig.getConnection();
					PreparedStatement updateFirst = conn.prepareStatement(query);)
			{
				updateFirst.setString(1, account.getfirstName());
				//execute the update
				updateFirst.executeUpdate();

				System.out.println("Update for firstName was successful.");
				
			}catch(SQLException ex)//try
			{
				DBConfig.displayException(ex);
			}
	 	}
		//-----------------------------------------------------------------------------------------------------------------
	  	//Error checks lastName
	  
 		boolean test2 = false;
		lblErrorlastName.setText(null);
		if(!lastName.equals("")){
			//checks for numbers
			Pattern p3 = Pattern.compile("([0-9])", Pattern.CASE_INSENSITIVE);
			Matcher lastN = p3.matcher(lastName);
			boolean lasNam = lastN.find();
			if(lasNam){
				lblErrorlastName.setText("Last name cannot contain numbers.");
				test2 = false;
			}else{
				test2 = true;
			}
				
			//checks for special characters
			Pattern p4 = Pattern.compile("[^a-zA-Z0-9-\\.]");//regex, can test on regex101.com -> very useful
			Matcher lName = p4.matcher(lastName);
			boolean ln = lName.find();
			
			if(ln){//fix for - and .
				lblErrorlastName.setText("Invalid last name.Cannot use special characters.");
				test2 = false;
			}
		}
		//-----------------------------------------------------------------------------------------------------------------
	  	/* Updates lastName in userinfo table of Database -> populates: lastName */
		if(test2 == true){
			account.setlastName(lastName);
			String query2 = "UPDATE userinfo SET lastName = ?";
			//attempt to connect to database
			try (Connection conn = DBConfig.getConnection();
					PreparedStatement updateLast = conn.prepareStatement(query2);)
			{
				updateLast.setString(1, account.getlastName());
				//execute the update
				updateLast.executeUpdate();

				System.out.println("Update for lastName was successful.");

			}catch(SQLException ex)//try
			{
				DBConfig.displayException(ex);
			}
		}
		//-----------------------------------------------------------------------------------------------------------------
		//Error checks birthDate dates and format
		lblErrorbirthDate.setText(null);	
		boolean test3 = true;
		if(!birthDate.equals("")){		
			//error check for birthDate
			Pattern p5 = Pattern.compile("[^0-9/]");
			Matcher bDate = p5.matcher(birthDate);
			boolean bDat = bDate.find();
					
			String string = birthDate;
			int count2 = 0;
			for( int i = 0; i < string.length(); i++ ) {
				if( string.charAt(i) == '/' ) {
					count2++;
				} 
			}
					
			if(bDat){
				lblErrorbirthDate.setText("Birth Date must only contain numbers.");
			 	test3 = false;
			}else if(count2 != 2){
				lblErrorbirthDate.setText("Date format required.");
				test3 = false;
			}else{
				String[] parts = string.split("/");
				String part1 = parts[0]; //charAt(0) & charAr(1)
				String part2 = parts[1];
				String part3 = parts[2];
				int month = Integer.parseInt(part1);
				int day = Integer.parseInt(part2);
				int year = Integer.parseInt(part3);
				//System.out.println(month+":"+day+":"+year);//testing
				if(birthDate.charAt(2) != '/'|| birthDate.charAt(5) != '/'|| birthDate.length() != 10){
					lblErrorbirthDate.setText("Incorrect date format.");
					test3 = false;
				}else if(month > 12 || month < 1 || day > 31 || day < 1 || year > 2017 || year < 1920){
					lblErrorbirthDate.setText("Invalid date.");
					test3 = false;
				}else if(month == 2 && day > 29){
					lblErrorbirthDate.setText("Invalid day for February.");
					test3 = false;
				}else if(month == 4 || month == 6 || month == 9 || month == 11 && day > 30){
					lblErrorbirthDate.setText("Invalid day for that month.");
					test3 = false;
				}
			}
			if(birthDate.equals("")){
				lblErrorbirthDate.setText(null);
				test3 = false;
			}
		}
		//-----------------------------------------------------------------------------------------------------------------
		/* Updates birthDate in userinfo table of Database -> populates: birthDate */
		if(test3 == true){
			account.setbirthDate(birthDate);
			String query3 = "UPDATE userinfo SET birthDate = ?";
			//attempt to connect to database
			try (Connection conn = DBConfig.getConnection();
					PreparedStatement updatebirthDate = conn.prepareStatement(query3);)
			{
				updatebirthDate.setString(1, account.getbirthDate());
				//execute the update
				updatebirthDate.executeUpdate();

				System.out.println("Update for birthDate was successful.");

			}catch(SQLException ex)//try
			{
				DBConfig.displayException(ex);
			}
		}
		//-----------------------------------------------------------------------------------------------------------------
		//Error checks password and conPassword and makes sure they match
		lblErrorPassword.setText(null);
		boolean test4 = false;
		if(!curPassword.equals("") || !password.equals("") || !conPassword.equals("")){
			if(!curPassword.equals("") && !password.equals("") && !conPassword.equals("")){
				if(checkcurrentPassword(curPassword) == true){
					int plen = txtNewPass.getLength();
					int cplen = txtConfirmPass.getLength();
					int password2, conPassword2;
					
					//won't run password checks if null
					if(plen > 0 && cplen > 0){
						try{
							lblErrorPassword.setText(null);
							password2 = Integer.parseInt(txtNewPass.getText());
							conPassword2 = Integer.parseInt(txtConfirmPass.getText());
							
							if(plen != 4 || cplen != 4){//catches when field is less than or greater than 4 digits
								lblErrorPassword.setText("Password must be 4 digits long.");
								test4 = false;
								txtNewPass.setText(null);
								txtConfirmPass.setText(null);
							}else if(password2 == conPassword2){//will update account
								test4 = true;
							}else{//password does not equal confirmation password
								lblErrorPassword.setText("Incorrect password confirmation.");
								test4 = false;
								txtNewPass.setText(null);
								txtConfirmPass.setText(null);
							}
						 }catch (NumberFormatException e){//thrown when a non-number is entered for password
							lblErrorPassword.setText("Password must consist of numbers.");
							txtNewPass.setText(null);
							txtConfirmPass.setText(null);
							e.getMessage();
							test4 = false;
						 }
					}
				}
			}else{
				lblErrorPassword.setText("Please fill in all password fields.");
			}
		}
		
		//-----------------------------------------------------------------------------------------------------------------
		/* Updates password in userinfo table of Database -> populates: password */
		if(test4 == true){
			account.setpassword(password);
			String query5 = "UPDATE userinfo SET password = ?";
			//attempt to connect to database
			try (Connection conn = DBConfig.getConnection();
				PreparedStatement updatePassword = conn.prepareStatement(query5);)
			{
					updatePassword.setString(1, account.getpassword());
				//execute the update
					updatePassword.executeUpdate();

				System.out.println("Update for password was successful.");

			}catch(SQLException ex)//try
			{
				DBConfig.displayException(ex);
			}
		}
		//-----------------------------------------------------------------------------------------------------------------
			//Error checks fullName for special characters and numbers
			lblErrorfullName.setText(null);
			boolean test5 = false;
			//checks for numbers
			if(!fullName.equals("")){
		  		Pattern p7 = Pattern.compile("([0-9])", Pattern.CASE_INSENSITIVE);
		  		Matcher fullN = p7.matcher(fullName);
				boolean fulNam = fullN.find();
				if(fulNam){
					lblErrorfullName.setText("Full name cannot contain numbers.");
					test5 = false;
				}else{
					test5 = true;
				}
				
				//checks for to make sure full name only consists of letters, ., -, and spaces
				Pattern p8 = Pattern.compile("[^a-zA-Z0-9-\\.\\s]");
				Matcher fuName = p8.matcher(fullName);
				boolean fun = fuName.find();
				if(fun){
					lblErrorfullName.setText("Invalid full name. Cannot use special characters.");
					test5 = false;
				}
			}
			
			//-----------------------------------------------------------------------------------------------------------------
			/* Updates fullName in contactinfo table of Database -> populates: fullName */
			if(test5 == true){
				account.setfullName(fullName);
				String query6 = "UPDATE contactinfo SET fullName = ?";
				//attempt to connect to database
				try (Connection conn = DBConfig.getConnection();
						PreparedStatement updatefullName = conn.prepareStatement(query6);)
				{
					updatefullName.setString(1, account.getfullName());
					//execute the update
					updatefullName.executeUpdate();

					System.out.println("Update for fullName was successful.");

				}catch(SQLException ex)//try
				{
					DBConfig.displayException(ex);
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			//Error checks relation for special characters and numbers, separately
			lblErrorrelation.setText(null);
			boolean test6 = false;
			if(!relation.equals("")){
				//checks for numbers
		  		Pattern p9 = Pattern.compile("([0-9])", Pattern.CASE_INSENSITIVE);
		  		Matcher relate = p9.matcher(relation);
				boolean rela = relate.find();
				if(rela){
					lblErrorrelation.setText("Relationship cannot contain numbers.");
					test6 = false;
				}else{
					test6 = true;
				}
				
				//checks to make sure relation only contains letters, -, and spaces
				Pattern p10 = Pattern.compile("[^a-zA-Z0-9-\\s]");
				Matcher relat = p10.matcher(relation);
				boolean rel = relat.find();
				if(rel){
					lblErrorrelation.setText("Invalid relation. Cannot use special characters.");
					test6 = false;
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			/* Updates relation in contactinfo table of Database -> populates: relation */
			if(test6 == true){
				account.setrelation(relation);
				String query7 = "UPDATE contactinfo SET relation = ?";
				//attempt to connect to database
				try (Connection conn = DBConfig.getConnection();
						PreparedStatement updaterelation = conn.prepareStatement(query7);)
				{
					updaterelation.setString(1, account.getrelation());
					//execute the update
					updaterelation.executeUpdate();

					System.out.println("Update for relation was successful.");

				}catch(SQLException ex)//try
				{
					DBConfig.displayException(ex);
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			//Error checks phone for anything other than numbers and -
			lblErrorphone.setText(null);
			boolean test7 = false;
			if(!phone.equals("")){
				//checks to make sure phone number only consists of numbers and -
				Pattern p11 = Pattern.compile("[^0-9-]");
				Matcher phon = p11.matcher(phone);
				boolean pho = phon.find();
				if(pho){
					lblErrorphone.setText("Invalid phone number. Phone number must consist of numbers only.");
					test7 = false;
				}else if(phone.charAt(3) != '-' || phone.charAt(7) != '-') {
					lblErrorphone.setText("Incorrect phone number format.");
					test7 = false;
				}else if(phone.length() != 12){
					lblErrorphone.setText("Incorrect phone number length.");
					test7 = false;
				}else{
					test7 = true;
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			/* Updates phone in contactinfo table of Database -> populates: phone */
			if(test7 == true){
				account.setphone(phone);
				String query8 = "UPDATE contactinfo SET phone = ?";
				//attempt to connect to database
				try (Connection conn = DBConfig.getConnection();
						PreparedStatement updatephone = conn.prepareStatement(query8);)
				{
					updatephone.setString(1, account.getphone());
					//execute the update
					updatephone.executeUpdate();

					System.out.println("Update for phone was successful.");

				}catch(SQLException ex)//try
				{
					DBConfig.displayException(ex);
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			//Error checks email for at least one @ and . plus length
			lblErroremail.setText(null);
			boolean test8 = false;
			if(!email.equals("")){
				//checks to make sure email consists of at least one @ and .
				String s = email;
				int count3 = 0;
				for( int i = 0; i < s.length(); i++ ) {
				    if( s.charAt(i) == '@' ) {
				        count3++;
				    } 
				}
				int counter2 = 0;
				for( int i = 0; i < s.length(); i++ ) {
				    if( s.charAt(i) == '.' ) {
				        counter2++;
				    } 
				}
				
				Pattern p13 = Pattern.compile("[\\s]");
				Matcher mail = p13.matcher(email);
				boolean ema = mail.find();
				if(ema){
					lblErroremail.setText("Invalid email. Cannot contain spaces.");
					test8 = false;
				}
				if(count3 < 1 || counter2 < 1 || s.length() < 5){
					lblErroremail.setText("Invalid email address.");
					test8 = false;
				}else if(s.length() > 30){
					lblErroremail.setText("Email is too long. Cannot exceed 30 characters.");
					test8 = false;
				}else{
					test8 = true;
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
			/* Updates email in contactinfo table of Database -> populates: email */
			if(test8 == true){
				account.setemail(email);
				String query9 = "UPDATE contactinfo SET email = ?";
				//attempt to connect to database
				try (Connection conn = DBConfig.getConnection();
						PreparedStatement updateemail = conn.prepareStatement(query9);)
				{
					updateemail.setString(1, account.getemail());
					//execute the update
					updateemail.executeUpdate();

					System.out.println("Update for email was successful.");

				}catch(SQLException ex)//try
				{
					DBConfig.displayException(ex);
				}
			}
			//-----------------------------------------------------------------------------------------------------------------
		}catch(Exception e){
			e.getMessage();
		}
  	}
  //-----------------------------------------------------------------------------------------------------------------
  	public boolean checkcurrentPassword(String curPassword){	
  		/* Checks password against database passwords */
  		boolean pass = false;
  		
  		try 
  		{
  			Connection conn = DBConfig.getConnection();
  			
  			String query4 = "SELECT password FROM userinfo WHERE password = ?";
  			PreparedStatement ps = conn.prepareStatement(query4);
  			ps.setString(1, curPassword);
  			ResultSet rs = ps.executeQuery();
  		
  		    while(rs.next()){
  			    String checkPass = rs.getString("password");
  			    if(checkPass != null){//checks userName and password from database with local variables
 			    	if(checkPass.equals(curPassword)){
 			    		pass = true;
  			    	}else{
  				    	lblErrorPassword.setText("Incorrect current password.");
  				   		System.out.println("Wrong password.");
  				   		pass = false;
  				   	}
  			   }else{
  			    	lblErrorPassword.setText("Null password.");
  			    }
  		    }
 		    conn.close();  
  		}catch (SQLException ex) {
  			DBConfig.displayException(ex);
  		}
  		return pass;
  	}	
  	//-----------------------------------------------------------------------------------------------------------------
  	//capitalizes first letter in name
  	public String capitalizeName(String name){
  			return name.substring(0,1).toUpperCase() + name.substring(1);//.toLowerCase();
  	}
  	//-----------------------------------------------------------------------------------------------------------------
	//log in button clicked on CreateAccount page, takes you to LogIn page
	public void ClickgetLogInButton(ActionEvent event) throws Exception {
		stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
		root = FXMLLoader.load(getClass().getResource("/view/MainView.fxml"));
		scene = new Scene(root);
		stage.setScene(scene);
	}
	//-----------------------------------------------------------------------------------------------------------------
}